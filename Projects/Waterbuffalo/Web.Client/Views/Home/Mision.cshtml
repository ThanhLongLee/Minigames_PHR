
@{
    ViewBag.Title = "Mision";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://telegram.org/js/telegram-web-app.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
    const user = {
        Id: Telegram.WebApp.initDataUnsafe.user.id,
        Firstname: Telegram.WebApp.initDataUnsafe.user.first_name,
        Lastname: Telegram.WebApp.initDataUnsafe.user.last_name,
        Username: Telegram.WebApp.initDataUnsafe.user.username
    };

    // Lấy danh sách các link khi trang load
    $.ajax({
        url: '@Url.Action("LayDanhSachLinks", "Home")',
        type: 'GET',
        data: { userId: user.Id },
        dataType: 'json',
        success: function (data) {
            var linksContainer = $('#linksContainer');
            linksContainer.empty(); // Xóa nội dung cũ nếu có
            var imgArray = ['/lib/img/x.png', '/lib/img/send.png', '/lib/img/web.png', '/lib/img/dowload.png', '/lib/img/dowload.png',
                '/lib/img/ragdoll.png', '/lib/img/kanak.png', '/lib/img/buffalo.png'];
            data.forEach(function (link, index) {
                // Tạo div chứa thông tin về link
                var linkElement = $('<div>', {
                    class: 'relative flex items-center w-full h-20 rounded-lg shadow-lg px-2 gradient-background'
                });

                var leftColumn = $('<div>', {
                    class: 'w-1/5'
                });

                leftColumn.append($('<img>', {
                    src: imgArray[index % imgArray.length],
                    alt: 'img',
                    class: 'w-10 h-10 ml-4'
                }));

                linkElement.append(leftColumn);

                // Thêm khối ở giữa (50%)
                var middleColumn = $('<div>', {
                    class: 'w-1/2 flex flex-col justify-center ml-6'
                });
                middleColumn.append($('<span>', {
                    text: link.Description,
                    class: 'text-white text-xs mb-1'
                }));
                var scoreContainer = $('<div>', {
                    class: 'flex items-center' // Sử dụng flex để căn giữa ảnh và text
                });

                // Thêm ảnh vào trong scoreContainer
                scoreContainer.append($('<img>', {
                    src: '/lib/img/menu_tap.png', // Đường dẫn đến ảnh của bạn
                    alt: 'Icon',
                    class: 'w-6 h-6 mr-2' // Đặt kích thước và khoảng cách bên phải cho ảnh
                }));

                // Thêm text ScoreAwarded vào trong scoreContainer
                scoreContainer.append($('<p>', {
                    text: `+${link.ScoreAwarded}`,
                    class: 'text-white text-sm font-semibold'
                }));

                // Thêm scoreContainer vào middleColumn
                middleColumn.append(scoreContainer);

                // Thêm middleColumn vào linkElement
                linkElement.append(middleColumn);

                // Thêm khối bên phải (30%)
                var rightColumn = $('<div>', {
                    class: 'w-1/3 flex items-center justify-center'
                });
                if (!link.IsCompleted) {
                    var startButton = $('<button>', {
                        text: 'Start',
                        class: 'start-btn px-2 py-1 bg-[#486bf6] text-white rounded border-2 border-white rounded-md hover:bg-[#006289] text-sm',
                        onclick: `startLink(${user.Id}, ${link.LinkID}, this, '${link.LinkUrl}')`
                    });
                    rightColumn.append(startButton);
                } else {
                    rightColumn.append($('<img>', {
                        src: '/lib/img/check_12533288.png',
                        alt: 'Success',
                        class: 'w-6 h-6'
                    }));
                }
                linkElement.append(rightColumn);

                // Thêm linkElement vào linksContainer
                linksContainer.append(linkElement);
            });
        },
        error: function (xhr, status, error) {
            $('#messageContainer').text('Error fetching links.');
        }
    });
});

function startLink(userId, linkId, buttonElement, linkUrl) {
    $.ajax({
        url: '/Home/CheckClickLink',
        type: 'POST',
        data: { userId: userId, linkId: linkId },
        dataType: 'json',
        success: function (data) {
                $(buttonElement).parent().find('.start-btn').remove(); // Xóa nút "Start"
            $(buttonElement).parent().append($('<img>', {
                src: '/lib/img/check_12533288.png',
                alt: 'Success',
                class: 'w-6 h-6'
            }));

                // Mở link trong Telegram
                Telegram.WebApp.openLink(linkUrl, { try_instant_view: false });

                // Load lại trang để đảm bảo giao diện cập nhật
                setTimeout(function () {
                    location.reload();
                }, 1000); // Thời gian trễ để đảm bảo liên kết được mở trước khi tải lại trang
        },
        error: function (xhr, status, error) {
            console.error('AJAX Error:', status, error);
        }
    });
}
</script>
<link href="~/lib/css/earn.css" rel="stylesheet" />
<div class="bg-gradient-to-t bg_image flex justify-center min-h-screen">
    <div class="w-full text-white font-bold flex flex-col max-w-xl">
        <div class="px-4 z-10">
            <div class="flex items-center justify-between text-center mt-4">
                <div class="flex-1 text-center">
                    <h4 class="title text-[25px]">MISSION</h4>
                </div>
            </div>
            <div id="exampleElement" class="relative flex items-center w-full h-20 rounded-lg shadow-lg px-2 gradient-background mt-4">
                <div class="w-1/5">
                    <img src="/lib/img/engergy.png" alt="img" class="w-10 h-10 ml-4" />
                </div>
                <div class="w-1/2 flex flex-col justify-center ml-6">
                    <span class="text-white text-xs mb-1">Connect Wallet</span>
                    <div class="flex items-center">
                        <img src="/lib/img/menu_tap.png" alt="Icon" class="w-6 h-6 mr-2" />
                        <p class="text-white text-sm font-semibold">+10000</p>
                    </div>
                </div>
                <div class="w-1/3 flex items-center justify-center">
                    <button id="walletActionBtn" class="start-btn px-2 py-1 bg-[#486bf6] text-white rounded border-2 border-white rounded-md hover:bg-[#006289] text-sm">
                    </button>
                    <img id="statusImage" src="" alt="" class="hidden w-6 h-6" /> <!-- Thêm thẻ img để hiển thị trạng thái -->
                </div>
            </div>

            <div id="linksContainer" class="flex flex-col space-y-1 pt-1">
            </div>
            </br></br></br>
        </div>
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src=@Html.FormatValue("https://unpkg.com/@tonconnect/ui@latest/dist/tonconnect-ui.min.js", null)></script>
<script src="https://unpkg.com/tonweb@0.0.66/dist/tonweb.js"></script>
<script>
    $(document).ready(function () {
        const user = {
            Id: Telegram.WebApp.initDataUnsafe.user.id,
            Firstname: Telegram.WebApp.initDataUnsafe.user.first_name,
            Lastname: Telegram.WebApp.initDataUnsafe.user.last_name,
            Username: Telegram.WebApp.initDataUnsafe.user.username
        };

        // Gọi action để kiểm tra trạng thái cộng điểm
        $.ajax({
            url: `/Home/GetStatusAddScore`, // Địa chỉ action
            type: 'POST', // Phương thức POST
            data: { userId: user.Id }, // Dữ liệu gửi đi
            success: function (data) {
                const walletActionBtn = $('#walletActionBtn');
                const statusImage = $('#statusImage'); // Thay đổi để lấy phần tử hình ảnh

                if (data.PointsStatus === true) {
                    walletActionBtn.addClass('hidden'); // Ẩn button
                    statusImage.attr('src', '/lib/img/check_12533288.png'); // Đặt src cho hình ảnh
                    statusImage.attr('alt', 'Success'); // Đặt alt cho hình ảnh
                    statusImage.removeClass('hidden'); // Hiển thị hình ảnh
                } else {
                    walletActionBtn.text('Start'); // Chưa cộng điểm
                    walletActionBtn.prop('disabled', false); // Cho phép click
                    walletActionBtn.removeClass('hidden'); // Hiển thị button
                    statusImage.addClass('hidden'); // Ẩn hình ảnh

                    // Thêm sự kiện click
                    walletActionBtn.off('click').click(async function () {
                        var tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
                            manifestUrl: 'https://minigames-phr.s3.ap-southeast-1.amazonaws.com/tonconnect-manifest.json',
                        });

                        // Cài đặt tùy chọn cho giao diện
                        tonConnectUI.uiOptions = {
                            twaReturnUrl: 'https://t.me/Propertyhero_bot/PHR_app'
                        };

                        // Kiểm tra kết nối ví khi khởi động
                        checkWalletConnection();

                        // Đăng ký sự kiện khi trạng thái ví thay đổi
                        tonConnectUI.onStatusChange(walletAndwalletInfo => {
                            if (walletAndwalletInfo) {
                                handleWalletConnect(walletAndwalletInfo.account);
                            }
                        });

                        // Kiểm tra kết nối ví
                        function checkWalletConnection() {
                            if (tonConnectUI.account?.address) {
                                handleWalletConnect(tonConnectUI.account);
                            } else {
                                // Hiển thị nút connect
                                tonConnectUI.openModal(); // Mở modal kết nối ví
                            }
                        }

                        async function handleWalletConnect(walletInfo) {
                            const address = walletInfo.address;
                            const walletName = "waller";
                            const formatAddress = new TonWeb.utils.Address(address);
                            const shortAddress = formatAddress.toString(true, true, true, true);
                            const displayAddress = shortAddress.substring(0, 5) + '...' + shortAddress.substring(shortAddress.length - 8);

                            // Gọi AJAX để lưu thông tin ví vào CSDL
                            $.ajax({
                                type: "POST",
                                url: "/Home/ConnectWallet",
                                contentType: 'application/json',
                                data: JSON.stringify({ userId: user.Id, walletAddress: shortAddress, exchangeName: walletName }),
                                success: function (response) {
                                    console.log("Connected successfully.");
                                    location.reload(); // Tải lại trang sau khi kết nối thành công
                                },
                                error: function (error) {
                                    console.log("Error connecting wallet.");
                                }
                            });
                        }
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error('Error:', error); // Xử lý lỗi
            }
        });
        $(document).on('hide.bs.modal', function () {
            const walletActionBtn = $('#walletActionBtn');
            walletActionBtn.off('click').click(async function () {
                // Mở modal khi nhấn lại nút Start
                tonConnectUI.openModal();
            });
        });
    });
</script>





